package simpledb;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

  private static final long serialVersionUID = 1L;

  private final JoinPredicate p;
  private DbIterator child1;
  private DbIterator child2;
  private boolean open;
  private Tuple currentPotentialTuple1;

  /**
   * Constructor. Accepts to children to join and the predicate to join them on
   * 
   * @param p The predicate to use to join the children
   * @param child1 Iterator for the left(outer) relation to join
   * @param child2 Iterator for the right(inner) relation to join
   */
  public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
    this.p = p;
    this.child1 = child1;
    this.child2 = child2;
    this.open = false;
    this.currentPotentialTuple1 = null;
  }

  public JoinPredicate getJoinPredicate() {
    return p;
  }

  /**
   * @return the field name of join field1. Should be quantified by alias or
   *         table name.
   * */
  public String getJoinField1Name() {
    return child1.getTupleDesc().getFieldName(p.getField1());
  }

  /**
   * @return the field name of join field2. Should be quantified by alias or
   *         table name.
   * */
  public String getJoinField2Name() {
    return child2.getTupleDesc().getFieldName(p.getField2());
  }

  /**
   * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
   *      implementation logic.
   */
  @Override
  public TupleDesc getTupleDesc() {
    return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
  }

  @Override
  public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
    super.open();
    child1.open();
    child2.open();
    this.open = true;
  }

  @Override
  public void close() {
    super.close();
    child1.close();
    child2.close();
    this.open = false;
  }

  @Override
  public void rewind() throws DbException, TransactionAbortedException {
    child1.rewind();
    child2.rewind();
    this.currentPotentialTuple1 = null;
  }

  /**
   * Returns the next tuple generated by the join, or null if there are no more
   * tuples. Logically, this is the next tuple in r1 cross r2 that satisfies the
   * join predicate. There are many possible implementations; the simplest is a
   * nested loops join.
   * <p>
   * Note that the tuples returned from this particular implementation of Join
   * are simply the concatenation of joining tuples from the left and right
   * relation. Therefore, if an equality predicate is used there will be two
   * copies of the join attribute in the results. (Removing such duplicate
   * columns can be done with an additional projection operator if needed.)
   * <p>
   * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6}, joined
   * on equality of the first column, then this returns {1,2,3,1,5,6}.
   * 
   * @return The next matching tuple.
   * @see JoinPredicate#filter
   */
  @Override
  protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    while (true) {
      while (currentPotentialTuple1 != null && child2.hasNext()) {
        Tuple potentialTuple2 = child2.next();
        if (p.filter(currentPotentialTuple1, potentialTuple2)) {
          return Tuple.join(currentPotentialTuple1, potentialTuple2);
        }
      }
      if (!child1.hasNext()) {
        return null;
      }
      currentPotentialTuple1 = child1.next();
      child2.rewind();
    }
  }

  @Override
  public DbIterator[] getChildren() {
    return new DbIterator[] { child1, child2 };
  }

  @Override
  public void setChildren(DbIterator[] children) {
    if (this.open)
      throw new IllegalStateException("Cannot set children while open.");
    this.child1 = children[0];
    this.child2 = children[1];
  }

}
